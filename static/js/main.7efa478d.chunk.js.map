{"version":3,"sources":["components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Form","useState","name","lastName","dateA","time","symptoms","date","updateDate","error","updateError","updateState","e","target","value","className","onSubmit","preventDefault","trim","type","placeholder","onChange","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mMAuGeA,EArGF,WAEX,MAA2BC,mBAAS,CAClCC,KAAM,GACNC,SAAU,GACVC,MAAO,GACPC,KAAM,GACNC,SAAU,KALZ,mBAAOC,EAAP,KAAaC,EAAb,KAQA,EAA6BP,oBAAS,GAAtC,mBAAOQ,EAAP,KAAcC,EAAd,KAGMC,EAAc,SAACC,GACnBJ,EAAW,2BACND,GADK,kBAEPK,EAAEC,OAAOX,KAAOU,EAAEC,OAAOC,UAKtBZ,EAA0CK,EAA1CL,KAAMC,EAAoCI,EAApCJ,SAAUC,EAA0BG,EAA1BH,MAAOC,EAAmBE,EAAnBF,KAAMC,EAAaC,EAAbD,SAyBrC,OACE,eAAC,WAAD,WACE,yCAECG,EAAQ,mBAAGM,UAAU,cAAb,wCAA4D,KAErE,uBAAMC,SA5BS,SAACJ,GAClBA,EAAEK,iBAIgB,KAAhBf,EAAKgB,QACe,KAApBf,EAASe,QACQ,KAAjBd,EAAMc,QACU,KAAhBb,EAAKa,QACe,KAApBZ,EAASY,QAETR,GAAY,IAiBZ,UACE,iDACA,uBACES,KAAK,OACLjB,KAAK,OACLa,UAAU,eACVK,YAAY,aACZC,SAAUV,EACVG,MAAOZ,IAET,uBACEiB,KAAK,OACLjB,KAAK,WACLa,UAAU,eACVK,YAAY,YACZC,SAAUV,EACVG,MAAOX,IAET,yCACA,uBACEgB,KAAK,OACLjB,KAAK,QACLa,UAAU,eACVM,SAAUV,EACVG,MAAOV,IAET,yCACA,uBACEe,KAAK,OACLjB,KAAK,OACLa,UAAU,eACVM,SAAUV,EACVG,MAAOT,IAET,6CACA,0BACEU,UAAU,eACVb,KAAK,WACLmB,SAAUV,EACVG,MAAOR,IAET,wBAAQa,KAAK,SAASJ,UAAU,8BAAhC,2BC3EOO,MAjBf,WACE,OACE,eAAC,WAAD,WACE,yDAEA,qBAAKP,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,cAAC,EAAD,MAEF,qBAAKA,UAAU,kBAAf,wBCDKQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7efa478d.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\n\r\nconst Form = () => {\r\n  //Add Appointment State\r\n  const [date, updateDate] = useState({\r\n    name: \"\",\r\n    lastName: \"\",\r\n    dateA: \"\",\r\n    time: \"\",\r\n    symptoms: \"\",\r\n  });\r\n\r\n  const [error, updateError] = useState(false);\r\n\r\n  //Function that is executed when the user types in the input\r\n  const updateState = (e) => {\r\n    updateDate({\r\n      ...date,\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  //Extract the values\r\n  const { name, lastName, dateA, time, symptoms } = date;\r\n\r\n  //When user submit the form\r\n  const submitDate = (e) => {\r\n    e.preventDefault();\r\n\r\n    //Validate\r\n    if (\r\n      name.trim() === \"\" ||\r\n      lastName.trim() === \"\" ||\r\n      dateA.trim() === \"\" ||\r\n      time.trim() === \"\" ||\r\n      symptoms.trim() === \"\"\r\n    ) {\r\n      updateError(true);\r\n      return;\r\n    }\r\n\r\n    //Asign id\r\n\r\n    //Create the date\r\n\r\n    //Refresh the form\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2>Create </h2>\r\n\r\n      {error ? <p className=\"alert-error\">Please complete all fields</p> : null}\r\n\r\n      <form onSubmit={submitDate}>\r\n        <label>Patient Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"First Name\"\r\n          onChange={updateState}\r\n          value={name}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"lastName\"\r\n          className=\"u-full-width\"\r\n          placeholder=\"Last Name\"\r\n          onChange={updateState}\r\n          value={lastName}\r\n        />\r\n        <label>Date</label>\r\n        <input\r\n          type=\"date\"\r\n          name=\"dateA\"\r\n          className=\"u-full-width\"\r\n          onChange={updateState}\r\n          value={dateA}\r\n        />\r\n        <label>Time</label>\r\n        <input\r\n          type=\"time\"\r\n          name=\"time\"\r\n          className=\"u-full-width\"\r\n          onChange={updateState}\r\n          value={time}\r\n        />\r\n        <label>Symptoms</label>\r\n        <textarea\r\n          className=\"u-full-width\"\r\n          name=\"symptoms\"\r\n          onChange={updateState}\r\n          value={symptoms}\r\n        ></textarea>\r\n        <button type=\"submit\" className=\"u-full-width button-primary\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { Fragment } from \"react\";\nimport Form from \"./components/Form\";\n\nfunction App() {\n  return (\n    <Fragment>\n      <h1>Medical Patient Manager</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Form />\n          </div>\n          <div className=\"one-half column\">2</div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}